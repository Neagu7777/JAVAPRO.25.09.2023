/*У нас есть класс Person.
1)Сделать его правильным- создать геттеры и сеттеры, проверить,
 что он соответствует тем правилам, которые мы обсуждали.
2)Создать класс пенсионный фонд в нем создать такие поля:
а)Наименование пенсионного фонда .
б)булеан переменная, является ли он государственный
в)дата создания
г)количество участников фонда.
3)Добавить сеттеры и геттеры этому классу, заблокируют прямой доступ к переменным.
4)Добавить метод "info"- выводить информацию по фонду.
Если фонд государственный, то информация должна содержать строку о том,
сколько тысячи человек использует фонд.
 Для негосударственного фонда сколько не тысяч человек использует фонд.
5)Запретите менять дату создания фонда(отобрать сеттер).

 */
/*
1)Создать класс Person.
2) В нем добавить такие поля:
а) Имя человека (выбрать самостоятельно тип данных)
б) Возраст человека (выбрать самостоятельно тип данных)
в) Рост (выбрать самостоятельно тип данных)
г) Вес (выбрать самостоятельно тип данных)
3) Добавить конструктор. Можно конструктор сгенерировать, но лучше написать самому
4) Добавить методы:
a) Инфо о человеке. Печатает информацию о человеке - сколько лет, его имя рост и все.
б) Идти на работу. Если возраст меньше 18 или больше 70, то пишет "отдыхаю дома", иначе "работаю"
5) Создать несколько объектов и заполнить их

Доп. задание:

6) Добавить поле "money" и создать метод getMoney, который делает return money
(То есть просто возвращает количество денег у человека).
Мы это тему еще не проходили, поэтому подсказки в личные сообщения просите спокойно.
7) перед int money переменной поставить ключевое слово private. Описать, что произойдет в программе.


1) Создать классы Pensioner и Worker. Унаследовать их от класса Person.
В класс Pensioner добавить дробное поле pension (пенсия),
в класс Worker добавить два поля minSalary и maxSalary (минимальная и максимальная зарплата).
2) В класс Person добавляем метод die(), который ничего не возвращает, но пишет "Человек погиб".
3) В классе Worker переопределеяем этот метод (override) таким образом:
пишем на экран сообщение "Этот человек не дожил до пенсии"
4) В классе Pensioner переопределяем так: пишем на экран "Этот пенсионер умер, он заработал: x".
Где вместо x нужно рассчитать значение по формуле "(age-50)*pension"



1) Создайте метод public void die(int years) в классе Person,
сделайте его абстрактным. Этот метод будет отличаться от обычного die() тем,
что человек будет умирать не сразу, а через некоторое количество лет
(которые и будут передаваться в параметре метода).
Реализуйте этот метод для  Pensioner и Worker таким образом:
а) для Worker просто вывести на экран "Этот человек не доживет до пенсии и умрет через " + years + "лет"
б) Для Pensioner пишем на экран "Этот пенсионер умрет через" + years + "лет"
2) Все классы, которые созданы, снабжаем собственными реализациями методов equals, hashCode и toString
3) Добавить для класса Worker несколько конструкторов (перегрузка)



1) Создайте класс-утилиту CalculatorUtils, в котором будет два статических метода с перегрузкой (overloading)

1) calculateAverage(int first, int second)
2) calculateAverage(int first, int second, int third)
Эти два метода должны считать среднее значение для двух и для трех введенных чисел соответственно.
2) Создайте интерфейс AbleToCalculatePension c единственным методом - расчетом пенсии double calculatePension(),
реализуйте этот интерфейс в классе Worker.
Реализация в классе Worker:

У каждого Worker'а есть две переменных - максимальная и минимальная зарплата. Используйте метод из утилиты CalculatorUtils, чтобы найти среднее значение этих двух чисел.
После этого возьмите 25% от получившегося значения - это и будет полученная пенсия.
 */

/*
1) добавьте поле "список из людей" (List) в пенсионный фонд, - это будут все вкладчики фонда
2) удалите поле - количество вкладчиков
3) Вместо поля "количество вкладчиков" используйте получение размера списка, созданного в пункте
 1. Теперь количество вкладчиков определяется тем, сколько человек хранится в листе.
4) Исправьте все места, где раньше использовалось поле из пункта 2
5) Создайте метод double calculateMedianPension() в пенсионном фонде.
Этот метод должен пройтись по всем элементам списка из людей, для каждого вызвать метод расчета пенсии.
Далее среди всех полученных пенсий для каждого человека необходимо найти среднее значение пенсии.
Это значение и вернуть из метода
 */
/*
        1 уровень сложности: 1) Создайте тип данных, описывающий различные профессии в формате enum (перечисления). Профессии (для примера): строитель, программист, слесарь
        2) Создайте новое поле в классе Worker - множество профессий, на которых успел поработать человек. (тип данных - Set)
        3) В методе рассчета пенсии добавьте новый коэффициент. к финальной рассчитанной пенсии добавляется 5% за каждые три профессии. Соответственно, если человек поработал на 9 профессиях,
        то его бонус составит 15% к пенсии.
*/
/*
 1 уровень сложности: 1) В пенсионный фонд поле добавьте Map, которая будет содержать в себе дни недели (как ключ) и булеан переменную,
 как значение. Данное поле будет обозначать, работает ли сегодня пенсионный фонд.

2) В логику рассчета пенсии в пенсионном фонде добавьте проверку дня недели. Если сегодня пенсионный фонд не работает
(узнать это можно сравнив текущий день недели и день недели из мапы), тогда пенсия равна 0.

2а) Как получить текущий день недели?

LocalDate localDate = new LocalDate();
DayOfWeek dayOfWeek = localDate.getDayOfWeek();

https://metanit.com/java/tutorial/12.3.php

3) Задачка отдельная (усложненная, не обязательная)

Создайте Map - связь город с городом. Из какого города можно полететь в какой.  Заполните эту мапу. Считайте с консоли два значения - город ИЗ которого лететь и город В который лететь.

Выведите ответ:
Можно ли из одного города попасть в другой (даже если придется пролететь несколько точек)

2 уровень сложности:
 */
